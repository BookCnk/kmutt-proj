// app/admin/export/page.tsx
"use client";

import React from "react";
import { ArrowRight } from "lucide-react";
import FileUploader from "@/components/export/FileUploader";
import ConvertProgress from "@/components/export/ConvertProgress";
import ConvertSuccess from "@/components/export/ConvertSuccess";
import { convertExcelToHtmlPdf } from "@/lib/export/excelToHtmlPdf";

type Step = "upload" | "convert" | "success";

export default function AdminExportPage() {
  const [step, setStep] = React.useState<Step>("upload");

  // single file (Excel only)
  const [excelFile, setExcelFile] = React.useState<File | null>(null);

  // output
  const [pdfUrl, setPdfUrl] = React.useState<string | null>(null);
  const [pdfName, setPdfName] = React.useState<string>("");
  const [excelName, setExcelName] = React.useState<string>("‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö.xlsx");

  // ----- Actions -----
  const handleConvert = async () => {
    if (!excelFile) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel");
      return;
    }

    setStep("convert");
    try {
      setExcelName(excelFile.name);
      setPdfName(excelFile.name.replace(/\.[^/.]+$/, ".pdf"));

      // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏ù‡∏±‡πà‡∏á client ‡∏•‡πâ‡∏ß‡∏ô: html2canvas + jsPDF
      const outBlob = await convertExcelToHtmlPdf(excelFile, {
        orientation: "l", // "p" ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á, "l" ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏ä‡πâ l)
        scale: 2, // 1‚Äì3 ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏¢‡∏¥‡πà‡∏á‡∏Ñ‡∏°
        // sheetName: "Sheet1",
        title: `‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß: ${excelFile.name}`, // ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        preview: true, // üëà ‡πÅ‡∏™‡∏î‡∏á HTML ‡πÄ‡∏õ‡πá‡∏ô overlay ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Ñ‡∏õ
        keepDomAfter: true, // üëà ‡πÉ‡∏´‡πâ DOM ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á (‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Å‡∏ï‡πà‡∏≠)
        maxWidthPx: 1200, // üëà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á DOM ‡∏ï‡∏≠‡∏ô‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß/‡πÅ‡∏Ñ‡∏õ (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏Å ~1200)
      });

      const url = URL.createObjectURL(outBlob);
      setPdfUrl(url);
      setStep("success");
    } catch (err) {
      console.error(err);
      alert("‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel");
      setStep("upload");
    }
  };

  const handleDownload = () => {
    if (!pdfUrl) return;
    const a = document.createElement("a");
    a.href = pdfUrl;
    a.download = pdfName || "output.pdf";
    document.body.appendChild(a);
    a.click();
    a.remove();
  };

  const handlePreview = () => {
    if (pdfUrl) window.open(pdfUrl, "_blank");
  };

  const handleReset = () => {
    if (pdfUrl) URL.revokeObjectURL(pdfUrl);
    setPdfUrl(null);
    setPdfName("");
    setExcelFile(null);
    setStep("upload");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 p-6 md:p-8">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center gap-3 mb-2">
          <div className="bg-gradient-to-br from-emerald-500 to-emerald-600 p-3 rounded-lg shadow-lg">
            <ArrowRight className="w-6 h-6 text-white" />
          </div>
          <div>
            <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-emerald-600 to-emerald-700 bg-clip-text text-transparent">
              ‡πÅ‡∏õ‡∏•‡∏á Excel ‚Üí PDF
            </h1>
            <p className="text-sm text-gray-600 mt-1">
              ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô PDF ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            </p>
          </div>
        </div>
      </div>

      <a
        href="/"
        className="inline-block mb-6 bg-gradient-to-br from-emerald-500 to-emerald-600 p-3 rounded-lg shadow-lg text-white">
        ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      </a>

      <div className="max-w-4xl mx-auto">
        {/* Step Indicator */}
        <div className="mb-8 flex items-center justify-between">
          <div className="flex items-center gap-4 flex-1">
            {/* 1 */}
            <div className="flex flex-col items-center">
              <div
                className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg transition ${
                  step === "upload" || step === "convert" || step === "success"
                    ? "bg-emerald-500 text-white"
                    : "bg-gray-200 text-gray-600"
                }`}>
                1
              </div>
              <span className="text-xs font-semibold text-gray-700 mt-2">
                ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
              </span>
            </div>

            <div
              className={`flex-1 h-1 transition ${
                step === "convert" || step === "success"
                  ? "bg-emerald-500"
                  : "bg-gray-300"
              }`}
            />

            {/* 2 */}
            <div className="flex flex-col items-center">
              <div
                className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg transition ${
                  step === "convert" || step === "success"
                    ? "bg-emerald-500 text-white"
                    : "bg-gray-200 text-gray-600"
                }`}>
                2
              </div>
              <span className="text-xs font-semibold text-gray-700 mt-2">
                ‡πÅ‡∏õ‡∏•‡∏á
              </span>
            </div>

            <div
              className={`flex-1 h-1 transition ${
                step === "success" ? "bg-emerald-500" : "bg-gray-300"
              }`}
            />

            {/* 3 */}
            <div className="flex flex-col items-center">
              <div
                className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg transition ${
                  step === "success"
                    ? "bg-emerald-500 text-white"
                    : "bg-gray-200 text-gray-600"
                }`}>
                3
              </div>
              <span className="text-xs font-semibold text-gray-700 mt-2">
                ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
              </span>
            </div>
          </div>
        </div>

        {/* Steps */}
        {step === "upload" && (
          <div className="bg-white rounded-xl shadow-md border border-gray-100 p-8 mb-6 space-y-6">
            <div>
              <h3 className="font-semibold text-gray-900 mb-2">
                ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
              </h3>
              <FileUploader
                onSelect={(f) => {
                  setExcelFile(f);
                  setExcelName(f.name);
                  setPdfName(f.name.replace(/\.[^/.]+$/, ".pdf"));
                }}
              />
              {excelFile && (
                <p className="mt-2 text-sm text-emerald-700">
                  ‚úì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß:{" "}
                  <span className="font-semibold">{excelFile.name}</span>
                </p>
              )}
            </div>

            {excelFile && (
              <div className="flex items-center gap-3">
                <button
                  onClick={handleConvert}
                  className="flex-1 px-6 py-3 bg-gradient-to-r from-emerald-500 to-emerald-600 text-white font-semibold rounded-lg hover:shadow-lg hover:from-emerald-600 hover:to-emerald-700 transition flex items-center justify-center gap-2">
                  <ArrowRight className="w-5 h-5" />
                  ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô PDF
                </button>
                <button
                  onClick={handleReset}
                  className="px-6 py-3 border border-gray-300 text-gray-700 font-semibold rounded-lg hover:bg-gray-50 transition">
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
              </div>
            )}
          </div>
        )}

        {step === "convert" && (
          <div className="mb-6">
            <ConvertProgress fileName={excelFile?.name} />
          </div>
        )}

        {step === "success" && (
          <div className="mb-6">
            <ConvertSuccess
              originalName={excelName}
              pdfName={pdfName || "output.pdf"}
              onDownload={handleDownload}
              onPreview={handlePreview}
              onReset={handleReset}
            />
          </div>
        )}

        {/* Info Box */}
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 flex gap-3">
          <svg
            className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true">
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M13 16h-1v-4h-1m1-4h.01M12 18.5a6.5 6.5 0 110-13 6.5 6.5 0 010 13z"
            />
          </svg>
          <div>
            <h4 className="font-semibold text-blue-900 mb-1">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h4>
            <ul className="list-disc pl-5 text-sm text-blue-800 space-y-1">
              <li>
                ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Excel 100%
                ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£/‡∏Å‡∏£‡∏≤‡∏ü/‡∏£‡∏π‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
              </li>
              <li>
                ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏°‡∏≤‡∏Å ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏ß‡πá‡∏ö (@font-face)
                ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ html2canvas ‡πÅ‡∏Ñ‡∏õ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
              </li>
              <li>
                ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏ß‡πâ‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ô Excel/‡∏à‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°{" "}
                <code>orientation: </code> ‡∏ï‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
